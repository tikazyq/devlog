name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint (if available)
        run: pnpm lint || echo "No lint script found"
        continue-on-error: true

      - name: Build packages
        run: pnpm build

      - name: Run unit tests
        run: pnpm test

      - name: Check types
        run: pnpm --filter @devlog/types build

      - name: Run integration tests
        run: pnpm test:integration

  mcp-test:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build MCP server
        run: pnpm build:mcp

      - name: Verify MCP server binary
        run: |
          ls -la packages/mcp/build/
          [ -f "packages/mcp/build/index.js" ] || { echo "MCP server binary not found"; exit 1; }
          [ -x "packages/mcp/build/index.js" ] || chmod +x "packages/mcp/build/index.js"

      - name: Test MCP server startup
        run: |
          cd packages/mcp
          timeout 10s node build/index.js --help || echo "MCP server help command test completed"
          
      - name: Test MCP server with stdio transport
        run: |
          cd packages/mcp
          # Test that the server can start and respond to basic MCP protocol
          echo '{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test-client", "version": "1.0.0"}}}' | timeout 10s node build/index.js || echo "MCP server protocol test completed"

      - name: Test MCP server functionality
        run: |
          # Run the integration test script that tests actual MCP server functionality
          cd packages/mcp
          node build/test.js

      - name: Run MCP protocol compliance tests
        run: |
          # Run comprehensive MCP protocol compliance tests
          pnpm test:mcp-compliance

  build-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Verify build artifacts
        run: |
          # Check that build artifacts exist
          [ -f "packages/mcp/build/index.js" ] || { echo "MCP server build failed"; exit 1; }
          [ -f "packages/types/build/index.js" ] || { echo "Types build failed"; exit 1; }
          [ -f "packages/types/build/index.d.ts" ] || { echo "Types declaration build failed"; exit 1; }
          [ -f "packages/core/build/index.js" ] || { echo "Core build failed"; exit 1; }
          [ -f "packages/core/build/index.d.ts" ] || { echo "Core declaration build failed"; exit 1; }
          echo "✅ All build artifacts verified!"

      - name: Test package installation
        run: |
          # Test that packages can be packed
          cd packages/mcp && npm pack
          cd ../types && npm pack
          cd ../core && npm pack
          echo "✅ All packages can be packed successfully!"

      - name: Test MCP server can be executed
        run: |
          cd packages/mcp
          chmod +x build/index.js
          # Test that the server binary is executable
          timeout 5s node build/index.js --version || echo "MCP server version check completed"
          echo "✅ MCP server binary is executable!"

  cross-platform-test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Test MCP server startup (Unix)
        if: runner.os != 'Windows'
        run: |
          cd packages/mcp
          timeout 10s node build/index.js --help || echo "MCP server help test completed"

      - name: Test MCP server startup (Windows)
        if: runner.os == 'Windows'
        run: |
          cd packages/mcp
          # Windows doesn't have timeout, use PowerShell
          powershell -Command "Start-Process -FilePath 'node' -ArgumentList 'build/index.js', '--help' -Wait -TimeoutSec 10 -ErrorAction SilentlyContinue"
          echo "MCP server help test completed"

      - name: Run basic functionality test
        run: |
          cd packages/mcp
          node build/test.js
