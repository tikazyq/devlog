name: Publish to NPM

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (patch, minor, major, or specific version like 1.2.3)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Packages to publish (comma-separated: mcp,types or leave empty for all)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}" # Remove 'v' prefix
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "bump=false" >> $GITHUB_OUTPUT
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "bump=true" >> $GITHUB_OUTPUT
          fi

      - name: Determine packages to publish
        id: packages
        run: |
          if [ -n "${{ github.event.inputs.packages }}" ]; then
            PACKAGES="${{ github.event.inputs.packages }}"
          else
            PACKAGES="mcp,types"
          fi
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Version bump packages
        if: steps.version.outputs.bump == 'true'
        run: |
          IFS=',' read -ra PACKAGE_ARRAY <<< "${{ steps.packages.outputs.packages }}"
          for pkg in "${PACKAGE_ARRAY[@]}"; do
            pkg=$(echo "$pkg" | xargs) # trim whitespace
            if [ "$pkg" == "mcp" ]; then
              cd packages/mcp
              npm version ${{ steps.version.outputs.version }} --no-git-tag-version
              cd ../..
            elif [ "$pkg" == "types" ]; then
              cd packages/types
              npm version ${{ steps.version.outputs.version }} --no-git-tag-version
              cd ../..
            fi
          done

      - name: Set specific version for packages
        if: steps.version.outputs.bump == 'false'
        run: |
          IFS=',' read -ra PACKAGE_ARRAY <<< "${{ steps.packages.outputs.packages }}"
          for pkg in "${PACKAGE_ARRAY[@]}"; do
            pkg=$(echo "$pkg" | xargs) # trim whitespace
            if [ "$pkg" == "mcp" ]; then
              cd packages/mcp
              npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
              cd ../..
            elif [ "$pkg" == "types" ]; then
              cd packages/types
              npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
              cd ../..
            fi
          done

      - name: Rebuild after version update
        run: pnpm build

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          IFS=',' read -ra PACKAGE_ARRAY <<< "${{ steps.packages.outputs.packages }}"
          for pkg in "${PACKAGE_ARRAY[@]}"; do
            pkg=$(echo "$pkg" | xargs) # trim whitespace
            if [ "$pkg" == "mcp" ]; then
              echo "Publishing @devlog/mcp..."
              cd packages/mcp
              npm publish --access public
              cd ../..
            elif [ "$pkg" == "types" ]; then
              echo "Publishing @devlog/types..."
              cd packages/types
              npm publish --access public
              cd ../..
            fi
          done

      - name: Commit version changes
        if: steps.version.outputs.bump == 'true'
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin main

      - name: Create GitHub release
        if: steps.version.outputs.bump == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes
            
            Published packages: ${{ steps.packages.outputs.packages }}
            
            ### Packages
            - @devlog/mcp@${{ steps.version.outputs.version }}
            - @devlog/types@${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
