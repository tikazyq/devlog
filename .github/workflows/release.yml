name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      packages:
        description: 'Packages to release (comma-separated: mcp-server,types or leave empty for all)'
        required: false
        default: 'mcp-server,types'
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current versions
        id: current_versions
        run: |
          MCP_VERSION=$(cd packages/mcp-server && npm pkg get version | tr -d '"')
          TYPES_VERSION=$(cd packages/types && npm pkg get version | tr -d '"')
          echo "mcp_version=$MCP_VERSION" >> $GITHUB_OUTPUT
          echo "types_version=$TYPES_VERSION" >> $GITHUB_OUTPUT

      - name: Bump versions
        id: bump_versions
        run: |
          PACKAGES="${{ github.event.inputs.packages }}"
          if [ -z "$PACKAGES" ]; then
            PACKAGES="mcp-server,types"
          fi
          
          NEW_VERSIONS=""
          IFS=',' read -ra PACKAGE_ARRAY <<< "$PACKAGES"
          for pkg in "${PACKAGE_ARRAY[@]}"; do
            pkg=$(echo "$pkg" | xargs) # trim whitespace
            if [ "$pkg" == "mcp-server" ]; then
              cd packages/mcp-server
              NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
              NEW_VERSION=${NEW_VERSION#v} # Remove 'v' prefix
              echo "mcp_new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              NEW_VERSIONS="$NEW_VERSIONS@devlog/mcp-server@$NEW_VERSION "
              cd ../..
            elif [ "$pkg" == "types" ]; then
              cd packages/types
              NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
              NEW_VERSION=${NEW_VERSION#v} # Remove 'v' prefix
              echo "types_new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              NEW_VERSIONS="$NEW_VERSIONS@devlog/types@$NEW_VERSION "
              cd ../..
            fi
          done
          echo "new_versions=$NEW_VERSIONS" >> $GITHUB_OUTPUT
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Rebuild after version bump
        run: pnpm build

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG="## What's Changed\n\n"
          CHANGELOG="$CHANGELOG### Packages Updated\n"
          
          if [[ "${{ steps.bump_versions.outputs.packages }}" == *"mcp-server"* ]]; then
            CHANGELOG="$CHANGELOG- **@devlog/mcp-server**: ${{ steps.current_versions.outputs.mcp_version }} → ${{ steps.bump_versions.outputs.mcp_new_version }}\n"
          fi
          
          if [[ "${{ steps.bump_versions.outputs.packages }}" == *"types"* ]]; then
            CHANGELOG="$CHANGELOG- **@devlog/types**: ${{ steps.current_versions.outputs.types_version }} → ${{ steps.bump_versions.outputs.types_new_version }}\n"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "chore: release ${{ steps.bump_versions.outputs.new_versions }}"
          git push origin main

      - name: Create and push tag
        id: tag
        run: |
          # Use the highest version for the tag
          MCP_VER="${{ steps.bump_versions.outputs.mcp_new_version }}"
          TYPES_VER="${{ steps.bump_versions.outputs.types_new_version }}"
          
          if [ -n "$MCP_VER" ] && [ -n "$TYPES_VER" ]; then
            # Both packages updated, use the higher version
            TAG_VERSION=$(printf '%s\n%s' "$MCP_VER" "$TYPES_VER" | sort -V | tail -n1)
          elif [ -n "$MCP_VER" ]; then
            TAG_VERSION="$MCP_VER"
          else
            TAG_VERSION="$TYPES_VER"
          fi
          
          TAG="v$TAG_VERSION"
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          IFS=',' read -ra PACKAGE_ARRAY <<< "${{ steps.bump_versions.outputs.packages }}"
          for pkg in "${PACKAGE_ARRAY[@]}"; do
            pkg=$(echo "$pkg" | xargs) # trim whitespace
            if [ "$pkg" == "mcp-server" ]; then
              echo "Publishing @devlog/mcp-server..."
              cd packages/mcp-server
              npm publish --access public
              cd ../..
            elif [ "$pkg" == "types" ]; then
              echo "Publishing @devlog/types..."
              cd packages/types
              npm publish --access public
              cd ../..
            fi
          done

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
